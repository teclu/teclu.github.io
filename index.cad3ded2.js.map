{"mappings":"AGEO,MAAM,EAAsB,KACjC,IAAM,EAA2B,IAAc,KAAK,KAAA,CAAM,AAAgB,IAAhB,KAAK,MAAA,IACzD,EAAI,IACJ,EAAI,IACJ,EAAI,IAEV,MAAO,QAAQ,MAAM,MAAM,SAAU,AACvC,EAEa,EAA2B,AAAC,IAEvC,IAAM,EAAM,AAAS,KAAT,EACR,EAAa,KAAK,KAAA,CAAM,KAAK,MAAA,GAAY,CAAA,AAFxB,KAAT,EAEuC,CAAA,EAAO,GAC1D,KAAO,EDTmB,ICUxB,GAAc,EAEhB,OAAO,CACT,EFfM,EAA6B,EAAE,CAErC,IAAI,EAAuB,EAE3B,MAAM,EAAmB,KACvB,IAAM,EAAc,KAAK,KAAA,CAAO,ACPT,GDOqB,KAAK,GAAA,GAAS,YAC1D,AAAI,IAAgB,IAGpB,EAAe,EACR,CAAA,EACT,EAEM,EAAe,CACnB,EACA,KAEA,OAAO,qBAAA,CAAsB,IAAY,EAAa,EAAQ,IAC1D,MACF,EAAQ,SAAA,CCvBc,uBDwBtB,EAAQ,QAAA,CAAS,EAAG,EAAG,EAAO,KAAA,CAAO,EAAO,MAA5C,EACA,EAAQ,SAAA,CAAY,EACpB,EAAU,OAAA,CAAQ,AAAC,IACjB,EAAQ,WAAA,CAAc,EAAS,KAA/B,CACA,EAAQ,UAAA,CAAW,EAAS,CAAA,CAAG,EAAS,CAAA,CCtBlB,GAAA,IDuBtB,EAAS,CAAA,EAAM,AAAA,CAAA,KAAK,MAAA,GAAW,GAAM,EAAI,EAAA,ECvBnB,GDwBtB,EAAS,CAAA,EAAM,AAAA,CAAA,KAAK,MAAA,GAAW,GAAM,EAAI,EAAA,ECxBnB,GDyBlB,CAAA,EAAS,CAAA,CAAI,EAAO,KAAA,EAAS,EAAS,CAAA,CAAI,CAAA,GAC5C,CAAA,EAAS,CAAA,CAAI,AAAA,EAAyB,EAAO,KAD/C,CAAA,EAGI,CAAA,EAAS,CAAA,CAAI,EAAO,MAAA,EAAU,EAAS,CAAA,CAAI,CAAA,GAC7C,CAAA,EAAS,CAAA,CAAI,AAAA,EAAyB,EAAO,MAD/C,CAAA,CAGF,GAEJ,EAEM,EAAsB,AAAC,IAC3B,GAAI,AAAqB,IAArB,EAAU,MAAA,CACZ,IAAK,IAAI,EAAQ,EAAG,ECvCK,IDuCkB,IACzC,EAAU,IAAA,CAAK,CACb,MAAO,AAAA,IACP,EAAG,AAAA,EAAyB,EAAO,KAAnC,EACA,EAAG,AAAA,EAAyB,EAAO,MAAnC,CACF,QAGF,EAAU,OAAA,CAAQ,AAAC,IACjB,EAAS,CAAA,CAAI,AAAA,EAAyB,EAAO,KAA7C,EACA,EAAS,CAAA,CAAI,AAAA,EAAyB,EAAO,MAA7C,CACF,EAEJ,EAwBA,AAtByB,CAAA,KACvB,IAAM,EACJ,SAAS,aAAA,CAAc,qBACzB,GAAI,EAAQ,CACV,IAAM,EAA2C,EAAO,UAAA,CAAW,MACnE,GAAI,EAAS,CAMX,IAAM,EAAW,IAAI,eALA,KACnB,EAAO,KAAA,CAAQ,EAAO,WAAtB,CACA,EAAO,MAAA,CAAS,EAAO,YAAvB,CACA,EAAoB,EACtB,GAEA,EAAS,OAAA,CAAQ,SAAS,IAA1B,EACA,OAAO,qBAAA,CAAsB,IAAY,EAAa,EAAQ,GAChE,MACE,QAAQ,KAAA,CAAM,sCAElB,MACE,QAAQ,KAAA,CAAM,+BAElB,CAAA","sources":["<anon>","src/canvas.ts","src/constants.ts","src/utils.ts"],"sourcesContent":["const $9ecda7333d28e490$export$756ea882743223a2 = \"rgba(0, 0, 15, 0.05)\";\nconst $9ecda7333d28e490$export$f8120378631c4e16 = 30;\nconst $9ecda7333d28e490$export$9edd4618dfabde91 = 100;\nconst $9ecda7333d28e490$export$b4ece097100ce0bc = 10;\n\n\n\nconst $df5bef30413a053b$export$e656feb5cc3debfe = ()=>{\n    const generateRandomColorValue = ()=>Math.round(Math.random() * 255);\n    const r = generateRandomColorValue();\n    const g = generateRandomColorValue();\n    const b = generateRandomColorValue();\n    const a = 0.5;\n    return `rgba(${r}, ${g}, ${b}, ${a})`;\n};\nconst $df5bef30413a053b$export$9b435b6f14697757 = (length)=>{\n    const max = length * 0.675;\n    const min = length * 0.325;\n    let coordinate = Math.round(Math.random() * (max - min) + min);\n    while(coordinate % (0, $9ecda7333d28e490$export$b4ece097100ce0bc))coordinate += 1;\n    return coordinate;\n};\n\n\nconst $4c0f0ee047d80e21$var$particles = [];\nlet $4c0f0ee047d80e21$var$previousTick = 0;\nconst $4c0f0ee047d80e21$var$isNextFrameReady = ()=>{\n    const currentTick = Math.round((0, $9ecda7333d28e490$export$f8120378631c4e16) * Date.now() / 1000);\n    if (currentTick === $4c0f0ee047d80e21$var$previousTick) return false;\n    $4c0f0ee047d80e21$var$previousTick = currentTick;\n    return true;\n};\nconst $4c0f0ee047d80e21$var$updateCanvas = (canvas, context)=>{\n    window.requestAnimationFrame(()=>$4c0f0ee047d80e21$var$updateCanvas(canvas, context));\n    if ($4c0f0ee047d80e21$var$isNextFrameReady()) {\n        context.fillStyle = (0, $9ecda7333d28e490$export$756ea882743223a2);\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.lineWidth = 1;\n        $4c0f0ee047d80e21$var$particles.forEach((particle)=>{\n            context.strokeStyle = particle.color;\n            context.strokeRect(particle.x, particle.y, (0, $9ecda7333d28e490$export$b4ece097100ce0bc), (0, $9ecda7333d28e490$export$b4ece097100ce0bc));\n            particle.x += (Math.random() > 0.5 ? 1 : -1) * (0, $9ecda7333d28e490$export$b4ece097100ce0bc);\n            particle.y += (Math.random() > 0.5 ? 1 : -1) * (0, $9ecda7333d28e490$export$b4ece097100ce0bc);\n            if (particle.x > canvas.width || particle.x < 0) particle.x = (0, $df5bef30413a053b$export$9b435b6f14697757)(canvas.width);\n            if (particle.y > canvas.height || particle.x < 0) particle.y = (0, $df5bef30413a053b$export$9b435b6f14697757)(canvas.height);\n        });\n    }\n};\nconst $4c0f0ee047d80e21$var$initialiseParticles = (canvas)=>{\n    if ($4c0f0ee047d80e21$var$particles.length === 0) for(let index = 0; index < (0, $9ecda7333d28e490$export$9edd4618dfabde91); index++)$4c0f0ee047d80e21$var$particles.push({\n        color: (0, $df5bef30413a053b$export$e656feb5cc3debfe)(),\n        x: (0, $df5bef30413a053b$export$9b435b6f14697757)(canvas.width),\n        y: (0, $df5bef30413a053b$export$9b435b6f14697757)(canvas.height)\n    });\n    else $4c0f0ee047d80e21$var$particles.forEach((particle)=>{\n        particle.x = (0, $df5bef30413a053b$export$9b435b6f14697757)(canvas.width);\n        particle.y = (0, $df5bef30413a053b$export$9b435b6f14697757)(canvas.height);\n    });\n};\nconst $4c0f0ee047d80e21$var$initialiseCanvas = ()=>{\n    const canvas = document.querySelector(\"canvas#background\");\n    if (canvas) {\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n            const resizeCanvas = ()=>{\n                canvas.width = canvas.clientWidth;\n                canvas.height = canvas.clientHeight;\n                $4c0f0ee047d80e21$var$initialiseParticles(canvas);\n            };\n            const observer = new ResizeObserver(resizeCanvas);\n            observer.observe(document.body);\n            window.requestAnimationFrame(()=>$4c0f0ee047d80e21$var$updateCanvas(canvas, context));\n        } else console.error(\"CanvasRenderingContext2D not found!\");\n    } else console.error(\"HTMLCanvasElement not found!\");\n};\n$4c0f0ee047d80e21$var$initialiseCanvas();\n\n\n//# sourceMappingURL=index.cad3ded2.js.map\n","import { BACKGROUND, FPS_LIMIT, MAX_PARTICLES, SQUARE_WIDTH } from './constants'\r\nimport { Particle } from './types'\r\nimport { generateRandomCoordinate, generateRandomColor } from './utils'\r\n\r\nconst particles: Array<Particle> = []\r\n\r\nlet previousTick: number = 0\r\n\r\nconst isNextFrameReady = (): boolean => {\r\n  const currentTick = Math.round((FPS_LIMIT * Date.now()) / 1000)\r\n  if (currentTick === previousTick) {\r\n    return false\r\n  }\r\n  previousTick = currentTick\r\n  return true\r\n}\r\n\r\nconst updateCanvas = (\r\n  canvas: HTMLCanvasElement,\r\n  context: CanvasRenderingContext2D\r\n): void => {\r\n  window.requestAnimationFrame((): void => updateCanvas(canvas, context))\r\n  if (isNextFrameReady()) {\r\n    context.fillStyle = BACKGROUND\r\n    context.fillRect(0, 0, canvas.width, canvas.height)\r\n    context.lineWidth = 1\r\n    particles.forEach((particle: Particle): void => {\r\n      context.strokeStyle = particle.color\r\n      context.strokeRect(particle.x, particle.y, SQUARE_WIDTH, SQUARE_WIDTH)\r\n      particle.x += (Math.random() > 0.5 ? 1 : -1) * SQUARE_WIDTH\r\n      particle.y += (Math.random() > 0.5 ? 1 : -1) * SQUARE_WIDTH\r\n      if (particle.x > canvas.width || particle.x < 0) {\r\n        particle.x = generateRandomCoordinate(canvas.width)\r\n      }\r\n      if (particle.y > canvas.height || particle.x < 0) {\r\n        particle.y = generateRandomCoordinate(canvas.height)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nconst initialiseParticles = (canvas: HTMLCanvasElement): void => {\r\n  if (particles.length === 0) {\r\n    for (let index = 0; index < MAX_PARTICLES; index++) {\r\n      particles.push({\r\n        color: generateRandomColor(),\r\n        x: generateRandomCoordinate(canvas.width),\r\n        y: generateRandomCoordinate(canvas.height),\r\n      })\r\n    }\r\n  } else {\r\n    particles.forEach((particle: Particle): void => {\r\n      particle.x = generateRandomCoordinate(canvas.width)\r\n      particle.y = generateRandomCoordinate(canvas.height)\r\n    })\r\n  }\r\n}\r\n\r\nconst initialiseCanvas = (): void => {\r\n  const canvas: HTMLCanvasElement | null =\r\n    document.querySelector('canvas#background')\r\n  if (canvas) {\r\n    const context: CanvasRenderingContext2D | null = canvas.getContext('2d')\r\n    if (context) {\r\n      const resizeCanvas = (): void => {\r\n        canvas.width = canvas.clientWidth\r\n        canvas.height = canvas.clientHeight\r\n        initialiseParticles(canvas)\r\n      }\r\n      const observer = new ResizeObserver(resizeCanvas)\r\n      observer.observe(document.body)\r\n      window.requestAnimationFrame((): void => updateCanvas(canvas, context))\r\n    } else {\r\n      console.error('CanvasRenderingContext2D not found!')\r\n    }\r\n  } else {\r\n    console.error('HTMLCanvasElement not found!')\r\n  }\r\n}\r\n\r\ninitialiseCanvas()\r\n","export const BACKGROUND = 'rgba(0, 0, 15, 0.05)'\r\n\r\nexport const FPS_LIMIT = 30\r\n\r\nexport const MAX_PARTICLES = 100\r\n\r\nexport const SQUARE_WIDTH = 10\r\n","import { SQUARE_WIDTH } from './constants'\r\n\r\nexport const generateRandomColor = (): string => {\r\n  const generateRandomColorValue = (): number => Math.round(Math.random() * 255)\r\n  const r = generateRandomColorValue()\r\n  const g = generateRandomColorValue()\r\n  const b = generateRandomColorValue()\r\n  const a = 0.5\r\n  return `rgba(${r}, ${g}, ${b}, ${a})`\r\n}\r\n\r\nexport const generateRandomCoordinate = (length: number): number => {\r\n  const max = length * 0.675\r\n  const min = length * 0.325\r\n  let coordinate = Math.round(Math.random() * (max - min) + min)\r\n  while (coordinate % SQUARE_WIDTH) {\r\n    coordinate += 1\r\n  }\r\n  return coordinate\r\n}\r\n"],"names":["$df5bef30413a053b$export$e656feb5cc3debfe","generateRandomColorValue","Math","round","random","r","g","b","$df5bef30413a053b$export$9b435b6f14697757","length","min","coordinate","max","$4c0f0ee047d80e21$var$particles","$4c0f0ee047d80e21$var$previousTick","$4c0f0ee047d80e21$var$isNextFrameReady","currentTick","Date","now","$4c0f0ee047d80e21$var$updateCanvas","canvas","context","window","requestAnimationFrame","fillStyle","fillRect","width","height","lineWidth","forEach","particle","strokeStyle","color","strokeRect","x","y","$4c0f0ee047d80e21$var$initialiseParticles","index","push","$4c0f0ee047d80e21$var$initialiseCanvas","document","querySelector","getContext","observer","ResizeObserver","clientWidth","clientHeight","observe","body","console","error"],"version":3,"file":"index.cad3ded2.js.map"}